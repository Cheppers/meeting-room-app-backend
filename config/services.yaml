# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    env(GOOGLE_AUTH_TYPE): "service_account"
    env(GOOGLE_AUTH_AUTH_URI): "https://accounts.google.com/o/oauth2/auth"
    env(GOOGLE_AUTH_TOKEN_URI): "https://accounts.google.com/o/oauth2/token"
    env(GOOGLE_AUTH_AUTH_PROVIDER_CERT_URL): "https://www.googleapis.com/oauth2/v1/certs"

    env(REDIS_HOST): "redis"
    env(REDIS_PORT): "6379"

    env(CANCEL_UNCONFIRMED): "0"
    env(CANCEL_UNCONFIRMED_AFTER): "5"

    redis.host: "%env(REDIS_HOST)%"
    redis.port: "%env(REDIS_PORT)%"

    google.auth.type: "%env(GOOGLE_AUTH_TYPE)%"
    google.auth.project_id: "%env(GOOGLE_AUTH_PROJECT_ID)%"
    google.auth.private_key_id: "%env(GOOGLE_AUTH_PRIVATE_KEY_ID)%"
    google.auth.private_key: "%env(GOOGLE_AUTH_PRIVATE_KEY)%"
    google.auth.client_email: "%env(GOOGLE_AUTH_CLIENT_EMAIL)%"
    google.auth.client_id: "%env(GOOGLE_AUTH_CLIENT_ID)%"
    google.auth.auth_uri: "%env(GOOGLE_AUTH_AUTH_URI)%"
    google.auth.token_uri: "%env(GOOGLE_AUTH_TOKEN_URI)%"
    google.auth.auth_provider_x509_cert_url: "%env(GOOGLE_AUTH_AUTH_PROVIDER_CERT_URL)%"
    google.auth.client_x509_cert_url: "%env(GOOGLE_AUTH_CLIENT_CERT_URL)%"

    test_token: 'test'
    user.token: "%env(default:test_token:USER_TOKEN)%"

    google.subject: "%env(GOOGLE_SUBJECT)%"
    calendar.user: "%env(CALENDAR_USER)%"

    public.url: "%env(PUBLIC_URL)%"
    private.url: "%env(PRIVATE_URL)%"

    cancel.unconfirmed: "%env(CANCEL_UNCONFIRMED)%"
    cancel.unconfirmed.after: "%env(CANCEL_UNCONFIRMED_AFTER)%"

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $appCache: '@app.cache'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Redis:
        class: Redis
        calls:
            - method: connect
              arguments:
                  - '%env(REDIS_HOST)%'
                  - '%env(int:REDIS_PORT)%'

    redis.cache:
        alias: Redis

    app.cache:
        alias: App\Utils\Cache\AppCache

    google.client:
        alias: App\Utils\GoogleAPI\GoogleClient
        public: true

    App\Utils\GoogleAPI\GoogleClient:
        calls:
            - method: initClient

    api_key_authenticator:
        class: App\Security\TokenAuthenticator
        arguments: ["@router"]

    google.service.directory.api:
        alias: Google_Service_Directory

    google.service.calendar.api:
        alias: Google_Service_Calendar

    App\Utils\GoogleAPI\GoogleCalendarResources:
        arguments:
            $serviceDirectory: '@google.service.directory.api'

    App\Utils\GoogleAPI\GoogleCalendarUsers:
        arguments:
            $serviceDirectory: '@google.service.directory.api'

    App\Utils\GoogleAPI\GoogleCalendarEvents:
        arguments:
            $googleServiceCalendar: '@google.service.calendar.api'
            $redis: '@redis.cache'

    App\Utils\GoogleAPI\GoogleCalendarWatchEvents:
        arguments:
            $googleServiceCalendar: '@google.service.calendar.api'
